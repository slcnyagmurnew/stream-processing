x-common:
  &common
  build:
    context: .
  image: airflow/custom:1.0
  user: "${AIRFLOW_UID}:0"
  env_file:
    - .env
  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./cl_logs:/opt/airflow/cl_logs
    - ./src:/opt/airflow/src
    - ./data:/opt/airflow/data
    - /var/run/docker.sock:/var/run/docker.sock

x-depends-on:
  &depends-on
  depends_on:
    postgres:
      condition: service_healthy
    airflow-init:
      condition: service_completed_successfully

services:
  postgres:
    image: postgres:13
    container_name: postgres_container
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
#      - ./postgres-data:/var/lib/postgresql/data
    ports:
      - "5434:5432"
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "airflow" ]
      interval: 5s
      retries: 5
    env_file:
      - .env

  scheduler:
    <<: *common
    <<: *depends-on
    container_name: airflow_scheduler
    command: scheduler
    restart: on-failure
    ports:
      - "8793:8793"

  webserver:
    <<: *common
    <<: *depends-on
    container_name: airflow_webserver
    restart: always
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:8080/health" ]
      interval: 30s
      timeout: 30s
      retries: 5

  airflow-init:
    <<: *common
    container_name: airflow_init
    entrypoint: /bin/bash
    command:
      - -c
      - |
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version

  zookeeper:
    image: docker.io/bitnami/zookeeper:3.8
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  kafka-server:
    image: docker.io/bitnami/kafka:3.3
    container_name: kafka_server
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=false
      - KAFKA_CFG_MAX_POLL_INTERVAL_MS=1500000  # increased
    depends_on:
      - zookeeper

  spark-master:
    build: spark-build
    image: stream-processing_spark-master:latest
    container_name: spark_master
    env_file:
      - .env
    ports:
      - "9090:8080"
      - "7077:7077"
      - "4040:4040"
    entrypoint: spark-submit --packages org.apache.spark:spark-sql-kafka-0-10_2.12:3.3.0 /src/stream.py
    volumes:
      - ./src:/src:rw
    depends_on:
      - kafka-server

  spark-worker:
    build: spark-build
    image: stream-processing_spark-master:latest
    container_name: spark_worker
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=4G
      - SPARK_EXECUTOR_MEMORY=4G
      - SPARK_WORKER_CORES=4
    volumes:
      - ./src:/src:rw
    depends_on:
      - spark-master

  kafka-visualizer:
    image: obsidiandynamics/kafdrop
    container_name: kafka_visualizer
    restart: on-failure
    ports:
      - "9000:9000"
    env_file:
      - .env
    depends_on:
      - kafka-server

  redis:
    image: redis/redis-stack-server
    container_name: redis
    ports:
      - "6379:6379"
#    volumes:
#      - ./redis-data:/data

  redis-insight:
    image: redislabs/redisinsight
    container_name: redis_insight
    ports:
      - "8001:8001"

  superset:
    build: superset-build
    container_name: superset_visualizer
    ports:
      - "8088:8088"


#  cassandra:
#    image: 'bitnami/cassandra:latest'
#    container_name: cassandra
#    hostname: cassandra
#    ports:
#      - '9042:9042'
#    volumes:
#      - ../stream-processing:/home
##    networks:
##      datapipeline:
##        ipv4_address: 172.18.0.5

